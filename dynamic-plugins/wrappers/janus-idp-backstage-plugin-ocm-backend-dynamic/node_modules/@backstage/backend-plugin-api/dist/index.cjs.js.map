{"version":3,"file":"index.cjs.js","sources":["../src/services/system/types.ts","../src/services/definitions/coreServices.ts","../src/wiring/createSharedEnvironment.ts","../src/wiring/factories.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * TODO\n *\n * @public\n */\nexport type ServiceRef<\n  TService,\n  TScope extends 'root' | 'plugin' = 'root' | 'plugin',\n> = {\n  id: string;\n\n  /**\n   * This determines the scope at which this service is available.\n   *\n   * Root scoped services are available to all other services but\n   * may only depend on other root scoped services.\n   *\n   * Plugin scoped services are only available to other plugin scoped\n   * services but may depend on all other services.\n   */\n  scope: TScope;\n\n  /**\n   * Utility for getting the type of the service, using `typeof serviceRef.T`.\n   * Attempting to actually read this value will result in an exception.\n   */\n  T: TService;\n\n  toString(): string;\n\n  $$type: '@backstage/ServiceRef';\n};\n\n/** @public */\nexport interface ServiceFactory<\n  TService = unknown,\n  TScope extends 'plugin' | 'root' = 'plugin' | 'root',\n> {\n  $$type: '@backstage/ServiceFactory';\n\n  service: ServiceRef<TService, TScope>;\n}\n\n/** @internal */\nexport interface InternalServiceFactory<\n  TService = unknown,\n  TScope extends 'plugin' | 'root' = 'plugin' | 'root',\n> extends ServiceFactory<TService, TScope> {\n  version: 'v1';\n  deps: { [key in string]: ServiceRef<unknown> };\n  createRootContext?(deps: { [key in string]: unknown }): Promise<unknown>;\n  factory(\n    deps: { [key in string]: unknown },\n    context: unknown,\n  ): Promise<TService>;\n}\n\n/**\n * Represents either a {@link ServiceFactory} or a function that returns one.\n *\n * @public\n */\nexport type ServiceFactoryOrFunction = ServiceFactory | (() => ServiceFactory);\n\n/** @public */\nexport interface ServiceRefConfig<TService, TScope extends 'root' | 'plugin'> {\n  id: string;\n  scope?: TScope;\n  defaultFactory?: (\n    service: ServiceRef<TService, TScope>,\n  ) => Promise<ServiceFactoryOrFunction>;\n}\n\n/**\n * Creates a new service definition. This overload is used to create plugin scoped services.\n *\n * @public\n */\nexport function createServiceRef<TService>(\n  config: ServiceRefConfig<TService, 'plugin'>,\n): ServiceRef<TService, 'plugin'>;\n\n/**\n * Creates a new service definition. This overload is used to create root scoped services.\n *\n * @public\n */\nexport function createServiceRef<TService>(\n  config: ServiceRefConfig<TService, 'root'>,\n): ServiceRef<TService, 'root'>;\nexport function createServiceRef<TService>(\n  config: ServiceRefConfig<TService, any>,\n): ServiceRef<TService, any> {\n  const { id, scope = 'plugin', defaultFactory } = config;\n  return {\n    id,\n    scope,\n    get T(): TService {\n      throw new Error(`tried to read ServiceRef.T of ${this}`);\n    },\n    toString() {\n      return `serviceRef{${config.id}}`;\n    },\n    $$type: '@backstage/ServiceRef',\n    __defaultFactory: defaultFactory,\n  } as ServiceRef<TService, typeof scope> & {\n    __defaultFactory?: (\n      service: ServiceRef<TService>,\n    ) => Promise<ServiceFactory<TService> | (() => ServiceFactory<TService>)>;\n  };\n}\n\n/** @ignore */\ntype ServiceRefsToInstances<\n  T extends { [key in string]: ServiceRef<unknown> },\n  TScope extends 'root' | 'plugin' = 'root' | 'plugin',\n> = {\n  [key in keyof T as T[key]['scope'] extends TScope ? key : never]: T[key]['T'];\n};\n\n/** @public */\nexport interface RootServiceFactoryConfig<\n  TService,\n  TImpl extends TService,\n  TDeps extends { [name in string]: ServiceRef<unknown> },\n> {\n  service: ServiceRef<TService, 'root'>;\n  deps: TDeps;\n  factory(deps: ServiceRefsToInstances<TDeps, 'root'>): TImpl | Promise<TImpl>;\n}\n\n/** @public */\nexport interface PluginServiceFactoryConfig<\n  TService,\n  TContext,\n  TImpl extends TService,\n  TDeps extends { [name in string]: ServiceRef<unknown> },\n> {\n  service: ServiceRef<TService, 'plugin'>;\n  deps: TDeps;\n  createRootContext?(\n    deps: ServiceRefsToInstances<TDeps, 'root'>,\n  ): TContext | Promise<TContext>;\n  factory(\n    deps: ServiceRefsToInstances<TDeps>,\n    context: TContext,\n  ): TImpl | Promise<TImpl>;\n}\n\n/**\n * Creates a root scoped service factory without options.\n *\n * @public\n * @param config - The service factory configuration.\n */\nexport function createServiceFactory<\n  TService,\n  TImpl extends TService,\n  TDeps extends { [name in string]: ServiceRef<unknown> },\n  TOpts extends object | undefined = undefined,\n>(\n  config: RootServiceFactoryConfig<TService, TImpl, TDeps>,\n): () => ServiceFactory<TService, 'root'>;\n/**\n * Creates a root scoped service factory with optional options.\n *\n * @public\n * @param config - The service factory configuration.\n */\nexport function createServiceFactory<\n  TService,\n  TImpl extends TService,\n  TDeps extends { [name in string]: ServiceRef<unknown> },\n  TOpts extends object | undefined = undefined,\n>(\n  config: (options?: TOpts) => RootServiceFactoryConfig<TService, TImpl, TDeps>,\n): (options?: TOpts) => ServiceFactory<TService, 'root'>;\n/**\n * Creates a root scoped service factory with required options.\n *\n * @public\n * @param config - The service factory configuration.\n */\nexport function createServiceFactory<\n  TService,\n  TImpl extends TService,\n  TDeps extends { [name in string]: ServiceRef<unknown> },\n  TOpts extends object | undefined = undefined,\n>(\n  config: (options: TOpts) => RootServiceFactoryConfig<TService, TImpl, TDeps>,\n): (options: TOpts) => ServiceFactory<TService, 'root'>;\n/**\n * Creates a plugin scoped service factory without options.\n *\n * @public\n * @param config - The service factory configuration.\n */\nexport function createServiceFactory<\n  TService,\n  TImpl extends TService,\n  TDeps extends { [name in string]: ServiceRef<unknown> },\n  TContext = undefined,\n  TOpts extends object | undefined = undefined,\n>(\n  config: PluginServiceFactoryConfig<TService, TContext, TImpl, TDeps>,\n): () => ServiceFactory<TService, 'plugin'>;\n/**\n * Creates a plugin scoped service factory with optional options.\n *\n * @public\n * @param config - The service factory configuration.\n */\nexport function createServiceFactory<\n  TService,\n  TImpl extends TService,\n  TDeps extends { [name in string]: ServiceRef<unknown> },\n  TContext = undefined,\n  TOpts extends object | undefined = undefined,\n>(\n  config: (\n    options?: TOpts,\n  ) => PluginServiceFactoryConfig<TService, TContext, TImpl, TDeps>,\n): (options?: TOpts) => ServiceFactory<TService, 'plugin'>;\n/**\n * Creates a plugin scoped service factory with required options.\n *\n * @public\n * @param config - The service factory configuration.\n */\nexport function createServiceFactory<\n  TService,\n  TImpl extends TService,\n  TDeps extends { [name in string]: ServiceRef<unknown> },\n  TContext = undefined,\n  TOpts extends object | undefined = undefined,\n>(\n  config:\n    | PluginServiceFactoryConfig<TService, TContext, TImpl, TDeps>\n    | ((\n        options: TOpts,\n      ) => PluginServiceFactoryConfig<TService, TContext, TImpl, TDeps>),\n): (options: TOpts) => ServiceFactory<TService, 'plugin'>;\nexport function createServiceFactory<\n  TService,\n  TImpl extends TService,\n  TDeps extends { [name in string]: ServiceRef<unknown> },\n  TContext,\n  TOpts extends object | undefined = undefined,\n>(\n  config:\n    | RootServiceFactoryConfig<TService, TImpl, TDeps>\n    | PluginServiceFactoryConfig<TService, TContext, TImpl, TDeps>\n    | ((options: TOpts) => RootServiceFactoryConfig<TService, TImpl, TDeps>)\n    | ((\n        options: TOpts,\n      ) => PluginServiceFactoryConfig<TService, TContext, TImpl, TDeps>)\n    | (() => RootServiceFactoryConfig<TService, TImpl, TDeps>)\n    | (() => PluginServiceFactoryConfig<TService, TContext, TImpl, TDeps>),\n): (options: TOpts) => ServiceFactory {\n  const configCallback = typeof config === 'function' ? config : () => config;\n  return (\n    options: TOpts,\n  ): InternalServiceFactory<TService, 'plugin' | 'root'> => {\n    const anyConf = configCallback(options);\n    if (anyConf.service.scope === 'root') {\n      const c = anyConf as RootServiceFactoryConfig<TService, TImpl, TDeps>;\n      return {\n        $$type: '@backstage/ServiceFactory',\n        version: 'v1',\n        service: c.service,\n        deps: c.deps,\n        factory: async (deps: TDeps) => c.factory(deps),\n      };\n    }\n    const c = anyConf as PluginServiceFactoryConfig<\n      TService,\n      TContext,\n      TImpl,\n      TDeps\n    >;\n    return {\n      $$type: '@backstage/ServiceFactory',\n      version: 'v1',\n      service: c.service,\n      ...('createRootContext' in c\n        ? {\n            createRootContext: async (deps: TDeps) =>\n              c?.createRootContext?.(deps),\n          }\n        : {}),\n      deps: c.deps,\n      factory: async (deps: TDeps, ctx: TContext) => c.factory(deps, ctx),\n    };\n  };\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createServiceRef } from '../system';\n\n/**\n * All core services references\n *\n * @public\n */\nexport namespace coreServices {\n  /**\n   * The service reference for the plugin scoped {@link CacheService}.\n   *\n   * @public\n   */\n  export const cache = createServiceRef<import('./CacheService').CacheService>({\n    id: 'core.cache',\n  });\n\n  /**\n   * The service reference for the root scoped {@link ConfigService}.\n   *\n   * @public\n   */\n  export const config = createServiceRef<\n    import('./ConfigService').ConfigService\n  >({ id: 'core.config', scope: 'root' });\n\n  /**\n   * The service reference for the plugin scoped {@link DatabaseService}.\n   *\n   * @public\n   */\n  export const database = createServiceRef<\n    import('./DatabaseService').DatabaseService\n  >({ id: 'core.database' });\n\n  /**\n   * The service reference for the plugin scoped {@link DiscoveryService}.\n   *\n   * @public\n   */\n  export const discovery = createServiceRef<\n    import('./DiscoveryService').DiscoveryService\n  >({ id: 'core.discovery' });\n\n  /**\n   * The service reference for the plugin scoped {@link HttpRouterService}.\n   *\n   * @public\n   */\n  export const httpRouter = createServiceRef<\n    import('./HttpRouterService').HttpRouterService\n  >({ id: 'core.httpRouter' });\n\n  /**\n   * The service reference for the plugin scoped {@link LifecycleService}.\n   *\n   * @public\n   */\n  export const lifecycle = createServiceRef<\n    import('./LifecycleService').LifecycleService\n  >({ id: 'core.lifecycle' });\n\n  /**\n   * The service reference for the plugin scoped {@link LoggerService}.\n   *\n   * @public\n   */\n  export const logger = createServiceRef<\n    import('./LoggerService').LoggerService\n  >({ id: 'core.logger' });\n\n  /**\n   * The service reference for the plugin scoped {@link PermissionsService}.\n   *\n   * @public\n   */\n  export const permissions = createServiceRef<\n    import('./PermissionsService').PermissionsService\n  >({ id: 'core.permissions' });\n\n  /**\n   * The service reference for the plugin scoped {@link PluginMetadataService}.\n   *\n   * @public\n   */\n  export const pluginMetadata = createServiceRef<\n    import('./PluginMetadataService').PluginMetadataService\n  >({ id: 'core.pluginMetadata' });\n\n  /**\n   * The service reference for the root scoped {@link RootHttpRouterService}.\n   *\n   * @public\n   */\n  export const rootHttpRouter = createServiceRef<\n    import('./RootHttpRouterService').RootHttpRouterService\n  >({ id: 'core.rootHttpRouter', scope: 'root' });\n\n  /**\n   * The service reference for the root scoped {@link RootLifecycleService}.\n   *\n   * @public\n   */\n  export const rootLifecycle = createServiceRef<\n    import('./RootLifecycleService').RootLifecycleService\n  >({ id: 'core.rootLifecycle', scope: 'root' });\n\n  /**\n   * The service reference for the root scoped {@link RootLoggerService}.\n   *\n   * @public\n   */\n  export const rootLogger = createServiceRef<\n    import('./RootLoggerService').RootLoggerService\n  >({ id: 'core.rootLogger', scope: 'root' });\n\n  /**\n   * The service reference for the plugin scoped {@link SchedulerService}.\n   *\n   * @public\n   */\n  export const scheduler = createServiceRef<\n    import('./SchedulerService').SchedulerService\n  >({ id: 'core.scheduler' });\n\n  /**\n   * The service reference for the plugin scoped {@link TokenManagerService}.\n   *\n   * @public\n   */\n  export const tokenManager = createServiceRef<\n    import('./TokenManagerService').TokenManagerService\n  >({ id: 'core.tokenManager' });\n\n  /**\n   * The service reference for the plugin scoped {@link UrlReaderService}.\n   *\n   * @public\n   */\n  export const urlReader = createServiceRef<\n    import('./UrlReaderService').UrlReaderService\n  >({ id: 'core.urlReader' });\n\n  /**\n   * The service reference for the plugin scoped {@link IdentityService}.\n   *\n   * @public\n   */\n  export const identity = createServiceRef<\n    import('./IdentityService').IdentityService\n  >({ id: 'core.identity' });\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ServiceFactory, ServiceFactoryOrFunction } from '../services';\n\n/**\n * The configuration options passed to {@link createSharedEnvironment}.\n *\n * @public\n */\nexport interface SharedBackendEnvironmentConfig {\n  services?: ServiceFactoryOrFunction[];\n}\n\n/**\n * An opaque type that represents the contents of a shared backend environment.\n *\n * @public\n */\nexport interface SharedBackendEnvironment {\n  $$type: '@backstage/SharedBackendEnvironment';\n\n  // NOTE: This type is opaque in order to allow for future API evolution without\n  // cluttering the external API. For example we might want to add support\n  // for more powerful callback based backend modifications.\n  //\n  // By making this opaque we also ensure that the type doesn't become an input\n  // type that we need to care about, as it would otherwise be possible to pass\n  // a custom environment definition to `createBackend`, which we don't want.\n}\n\n/**\n * This type is NOT supposed to be used by anyone except internally by the\n * backend-app-api package.\n *\n * @internal\n */\nexport interface InternalSharedBackendEnvironment {\n  version: 'v1';\n  services?: ServiceFactory[];\n}\n\n/**\n * Creates a shared backend environment which can be used to create multiple\n * backends.\n *\n * @public\n */\nexport function createSharedEnvironment<\n  TOptions extends [options?: object] = [],\n>(\n  config:\n    | SharedBackendEnvironmentConfig\n    | ((...params: TOptions) => SharedBackendEnvironmentConfig),\n): (...options: TOptions) => SharedBackendEnvironment {\n  const configCallback = typeof config === 'function' ? config : () => config;\n\n  return (...options) => {\n    const actualConfig = configCallback(...options);\n    const services = actualConfig?.services?.map(sf =>\n      typeof sf === 'function' ? sf() : sf,\n    );\n\n    const exists = new Set<string>();\n    const duplicates = new Set<string>();\n    for (const { service } of services ?? []) {\n      if (exists.has(service.id)) {\n        duplicates.add(service.id);\n      } else {\n        exists.add(service.id);\n      }\n    }\n\n    if (duplicates.size > 0) {\n      const dupStr = [...duplicates].map(id => `'${id}'`).join(', ');\n      throw new Error(\n        `Duplicate service implementations provided in shared environment for ${dupStr}`,\n      );\n    }\n\n    // Here to ensure type safety in this internal implementation.\n    const env: SharedBackendEnvironment & InternalSharedBackendEnvironment = {\n      $$type: '@backstage/SharedBackendEnvironment',\n      version: 'v1',\n      services,\n    };\n    return env;\n  };\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BackendModuleRegistrationPoints,\n  BackendPluginRegistrationPoints,\n  BackendFeature,\n  ExtensionPoint,\n  InternalBackendFeature,\n  InternalBackendModuleRegistration,\n  InternalBackendPluginRegistration,\n} from './types';\n\n/**\n * The configuration options passed to {@link createExtensionPoint}.\n *\n * @public\n * @see {@link https://backstage.io/docs/backend-system/architecture/extension-points | The architecture of extension points}\n * @see {@link https://backstage.io/docs/backend-system/architecture/naming-patterns | Recommended naming patterns}\n */\nexport interface ExtensionPointConfig {\n  /**\n   * The ID of this extension point.\n   *\n   * @see {@link https://backstage.io/docs/backend-system/architecture/naming-patterns | Recommended naming patterns}\n   */\n  id: string;\n}\n\n/**\n * Creates a new backend extension point.\n *\n * @public\n * @see {@link https://backstage.io/docs/backend-system/architecture/extension-points | The architecture of extension points}\n */\nexport function createExtensionPoint<T>(\n  config: ExtensionPointConfig,\n): ExtensionPoint<T> {\n  return {\n    id: config.id,\n    get T(): T {\n      throw new Error(`tried to read ExtensionPoint.T of ${this}`);\n    },\n    toString() {\n      return `extensionPoint{${config.id}}`;\n    },\n    $$type: '@backstage/ExtensionPoint',\n  };\n}\n\n/**\n * The configuration options passed to {@link createBackendPlugin}.\n *\n * @public\n * @see {@link https://backstage.io/docs/backend-system/architecture/plugins | The architecture of plugins}\n * @see {@link https://backstage.io/docs/backend-system/architecture/naming-patterns | Recommended naming patterns}\n */\nexport interface BackendPluginConfig {\n  /**\n   * The ID of this plugin.\n   *\n   * @see {@link https://backstage.io/docs/backend-system/architecture/naming-patterns | Recommended naming patterns}\n   */\n  pluginId: string;\n  register(reg: BackendPluginRegistrationPoints): void;\n}\n\n/**\n * Creates a new backend plugin.\n *\n * @public\n * @see {@link https://backstage.io/docs/backend-system/architecture/plugins | The architecture of plugins}\n * @see {@link https://backstage.io/docs/backend-system/architecture/naming-patterns | Recommended naming patterns}\n */\nexport function createBackendPlugin<TOptions extends [options?: object] = []>(\n  config: BackendPluginConfig | ((...params: TOptions) => BackendPluginConfig),\n): (...params: TOptions) => BackendFeature {\n  const configCallback = typeof config === 'function' ? config : () => config;\n  return (...options: TOptions): InternalBackendFeature => {\n    const c = configCallback(...options);\n\n    let registrations: InternalBackendPluginRegistration[];\n\n    return {\n      $$type: '@backstage/BackendFeature',\n      version: 'v1',\n      getRegistrations() {\n        if (registrations) {\n          return registrations;\n        }\n        const extensionPoints: InternalBackendPluginRegistration['extensionPoints'] =\n          [];\n        let init: InternalBackendPluginRegistration['init'] | undefined =\n          undefined;\n\n        c.register({\n          registerExtensionPoint(ext, impl) {\n            if (init) {\n              throw new Error(\n                'registerExtensionPoint called after registerInit',\n              );\n            }\n            extensionPoints.push([ext, impl]);\n          },\n          registerInit(regInit) {\n            if (init) {\n              throw new Error('registerInit must only be called once');\n            }\n            init = {\n              deps: regInit.deps,\n              func: regInit.init,\n            };\n          },\n        });\n\n        if (!init) {\n          throw new Error(\n            `registerInit was not called by register in ${c.pluginId}`,\n          );\n        }\n\n        registrations = [\n          {\n            type: 'plugin',\n            pluginId: c.pluginId,\n            extensionPoints,\n            init,\n          },\n        ];\n        return registrations;\n      },\n    };\n  };\n}\n\n/**\n * The configuration options passed to {@link createBackendModule}.\n *\n * @public\n * @see {@link https://backstage.io/docs/backend-system/architecture/modules | The architecture of modules}\n * @see {@link https://backstage.io/docs/backend-system/architecture/naming-patterns | Recommended naming patterns}\n */\nexport interface BackendModuleConfig {\n  /**\n   * The ID of this plugin.\n   *\n   * @see {@link https://backstage.io/docs/backend-system/architecture/naming-patterns | Recommended naming patterns}\n   */\n  pluginId: string;\n  /**\n   * Should exactly match the `id` of the plugin that the module extends.\n   */\n  moduleId: string;\n  register(reg: BackendModuleRegistrationPoints): void;\n}\n\n/**\n * Creates a new backend module for a given plugin.\n *\n * @public\n * @see {@link https://backstage.io/docs/backend-system/architecture/modules | The architecture of modules}\n * @see {@link https://backstage.io/docs/backend-system/architecture/naming-patterns | Recommended naming patterns}\n */\nexport function createBackendModule<TOptions extends [options?: object] = []>(\n  config: BackendModuleConfig | ((...params: TOptions) => BackendModuleConfig),\n): (...params: TOptions) => BackendFeature {\n  const configCallback = typeof config === 'function' ? config : () => config;\n  return (...options: TOptions): InternalBackendFeature => {\n    const c = configCallback(...options);\n\n    let registrations: InternalBackendModuleRegistration[];\n\n    return {\n      $$type: '@backstage/BackendFeature',\n      version: 'v1',\n      getRegistrations() {\n        if (registrations) {\n          return registrations;\n        }\n        let init: InternalBackendModuleRegistration['init'] | undefined =\n          undefined;\n\n        c.register({\n          registerInit(regInit) {\n            if (init) {\n              throw new Error('registerInit must only be called once');\n            }\n            init = {\n              deps: regInit.deps,\n              func: regInit.init,\n            };\n          },\n        });\n\n        if (!init) {\n          throw new Error(\n            `registerInit was not called by register in ${c.moduleId} module for ${c.pluginId}`,\n          );\n        }\n\n        registrations = [\n          {\n            type: 'module',\n            pluginId: c.pluginId,\n            moduleId: c.moduleId,\n            init,\n          },\n        ];\n        return registrations;\n      },\n    };\n  };\n}\n"],"names":["c","coreServices"],"mappings":"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"}